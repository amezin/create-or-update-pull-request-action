name: Create or update a pull request
description: >-
  Create or update a pull request through GitHub API.
  If an open pull request with the same source and target already exists,
  it will be updated to match the inputs.
  If the pull request does not exist, it will be created.

inputs:
  repository:
    description: Target repository name with owner
    default: ${{ github.repository }}
    required: true

  title:
    description: Pull request title
    required: true

  body:
    description: The contents of the pull request
    default: This pull request is automatically generated by ${{ github.workflow }} / ${{ github.job }}
    required: true

  head:
    description: Source branch name
    default: ${{ github.ref_name }}
    required: true

  base:
    description: Target branch name
    default: ${{ github.event.repository.default_branch }}
    required: true

  github-token:
    description: GitHub API token to use
    default: ${{ github.token }}
    required: true

outputs:
  pull_number:
    description: Created pull request number
    value: ${{ steps.create.outputs.result.data.number || steps.find-existing.outputs.result[0].number }}

runs:
  using: composite
  steps:
    - id: find-existing
      uses: actions/github-script@v7
      env:
        INPUT_REPOSITORY: ${{ inputs.repository }}
        INPUT_HEAD: ${{ inputs.head }}
        INPUT_BASE: ${{ inputs.base }}

      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const [owner, repo] = core.getInput('repository', { required: true }).split('/');
          const head = core.getInput('head', { required: true });
          const base = core.getInput('base', { required: true });

          const { data } = await github.request('GET /repos/{owner}/{repo}/pulls', {
            owner,
            repo,
            head: head.includes(':') ? head : `${owner}:${head}`,
            base,
          });

          return data;

    - id: create
      if: steps.find-existing.outputs.result == '[]'
      uses: actions/github-script@v7
      env:
        INPUT_REPOSITORY: ${{ inputs.repository }}
        INPUT_HEAD: ${{ inputs.head }}
        INPUT_BASE: ${{ inputs.base }}
        INPUT_TITLE: ${{ inputs.title }}
        INPUT_BODY: ${{ inputs.body }}

      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const [owner, repo] = core.getInput('repository', { required: true }).split('/');
          const head = core.getInput('head', { required: true });
          const base = core.getInput('base', { required: true });
          const title = core.getInput('title', { required: true });
          const body = core.getInput('body', { required: true });

          return await github.request('POST /repos/{owner}/{repo}/pulls', {
            repo,
            owner,
            head,
            base,
            title,
            body,
          });

    - id: update
      if: steps.find-existing.outputs.result != '[]'
      uses: actions/github-script@v7
      env:
        INPUT_REPOSITORY: ${{ inputs.repository }}
        INPUT_TITLE: ${{ inputs.title }}
        INPUT_BODY: ${{ inputs.body }}
        INPUT_NUMBER: ${{ steps.find-existing.outputs.result[0].number }}

      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const [owner, repo] = core.getInput('repository', { required: true }).split('/');
          const title = core.getInput('title', { required: true });
          const body = core.getInput('body', { required: true });
          const pull_number = core.getInput('number', { required: true });

          return await github.request('PATCH /repos/{owner}/{repo}/pulls/{pull_number}', {
            repo,
            owner,
            pull_number,
            title,
            body,
          });
